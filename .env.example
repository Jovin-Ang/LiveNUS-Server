# If you're running native Linux and your uid:gid isn't 1000:1000 you can set
# these to match your values before you build your image. You can check what
# your uid:gid is by running `id` from your terminal.
#export UID=1000
#export GID=1000

# You can generate a more secure secret by running: ./run rails secret
export SECRET_KEY_BASE=insecure_key_for_dev

# Which environment is running? These should be "development" or "production".
export RAILS_ENV=production
export NODE_ENV=production
#export RAILS_ENV=development
#export NODE_ENV=development

# The bind port for puma.
#
# Be warned that if you change this value you'll need to change 3000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
#export PORT=3000

# How many workers and threads should your app use? WEB_CONCURRENCY defaults
# to the server's CPU count * 2. That is a good starting point. In development
# it's a good idea to use 1 to avoid race conditions when debugging.
#export WEB_CONCURRENCY=
#export RAILS_MAX_THREADS=5

# You'll always want to set MYSQL_ROOT_PASSWORD since the mysql Docker image
# uses them for its default database user and password.
export MYSQL_ROOT_PASSWORD=password
export MYSQL_USER=livenusadmin
export MYSQL_PASSWORD=password
export MYSQL_DATABASE=live_nus

# Should Docker restart your containers if they go down in unexpected ways?
export DOCKER_RESTART_POLICY=unless-stopped
#export DOCKER_RESTART_POLICY=no

# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
#export DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:8000/up
export DOCKER_WEB_HEALTHCHECK_TEST=/bin/true
